@page "/contacts"
@using Radzen
@using System.Linq
@inject CookieHelper CookieHelper
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject NotificationService NotificationService
@inject DialogService DialogService

<PageTitle>Contacts</PageTitle>

@if (!isLoaded)
{
    <p>Loading...</p>
}
else if (string.IsNullOrEmpty(userName))
{
    <div class="alert alert-warning">Please login to manage contacts.</div>
}
else
{
    <RadzenButton Text="Add Contact" Icon="add_circle" Click="@InsertRow" Style="margin-bottom:10px" Disabled="@isInserting" />
    <RadzenDataGrid @ref="grid" Data="@contacts" TItem="ContactModel" EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" AllowPaging="true" PageSize="10">
        <Columns>
            <RadzenDataGridColumn Property="Name" Title="Name">
                <EditTemplate Context="contact">
                    <RadzenTextBox @bind-Value="contact.Name" Name="Name" Style="width:100%" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="PhoneNumber" Title="Phone">
                <Template Context="contact">
                    +1@contact.PhoneNumber
                </Template>
                <EditTemplate Context="contact">
                    <RadzenTextBox @bind-Value="contact.PhoneNumber" Name="Phone" Style="width:100%" InputAttributes="@(new Dictionary<string,object>{{"maxlength","10"},{"pattern","[0-9]*"},{"inputmode","numeric"}})" />
                    <RadzenRegularExpressionValidator Component="Phone" Pattern="^[0-9]{10}$" Text="Phone must be 10 digits" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Notes" Title="Notes">
                <EditTemplate Context="contact">
                    <RadzenTextBox @bind-Value="contact.Notes" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="contact" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
                <Template Context="contact">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="@(() => EditRow(contact))" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="margin-left:5px" Click="@(() => DeleteRow(contact))" />
                </Template>
                <EditTemplate Context="contact">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Click="@(() => SaveRow(contact))" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Style="margin-left:5px" Click="@(() => CancelEdit(contact))" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private string? userName;
    private bool isLoaded;
    private List<ContactModel> contacts = new();
    RadzenDataGrid<ContactModel>? grid;
    private bool isInserting;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userName = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(userName))
            {
                NavigationManager.NavigateTo("login?returnUrl=/contacts", true);
            }
            else
            {
                contacts = (await LoadContacts()).ToList();
            }
            isLoaded = true;
            StateHasChanged();
        }
    }

    async Task<IEnumerable<ContactModel>> LoadContacts()
    {
        var list = await MessageService.GetContacts();
        return list.Select(c =>
        {
            c.PhoneNumber = c.PhoneNumber.StartsWith("+1") ? c.PhoneNumber.Substring(2) : c.PhoneNumber;
            return c;
        });
    }

    async Task InsertRow()
    {
        isInserting = true;
        var contact = new ContactModel();
        contacts.Add(contact);
        await grid!.InsertRow(contact);
    }

    async Task EditRow(ContactModel contact)
    {
        await grid!.EditRow(contact);
    }

    void CancelEdit(ContactModel contact)
    {
        grid!.CancelEditRow(contact);
        if (contact.Id == 0)
        {
            contacts.Remove(contact);
        }
        isInserting = false;
    }

    async Task SaveRow(ContactModel contact)
    {
        await grid!.UpdateRow(contact);
        isInserting = false;
    }

    async Task DeleteRow(ContactModel contact)
    {
        bool? confirm = await DialogService.Confirm("Delete this contact?", "Confirm");
        if (confirm == true)
        {
            if (contact.Id != 0)
            {
                await MessageService.DeleteContact(contact.Id);
            }
            contacts.Remove(contact);
            await grid!.Reload();
            NotificationService.Notify(NotificationSeverity.Success, "Contact deleted");
        }
    }

    async Task OnUpdateRow(ContactModel contact)
    {
        await SaveContact(contact);
    }

    async Task OnCreateRow(ContactModel contact)
    {
        await SaveContact(contact);
    }

    async Task SaveContact(ContactModel contact)
    {
        try
        {
            var digits = new string((contact.PhoneNumber ?? string.Empty).Where(char.IsDigit).ToArray());
            if (digits.Length != 10)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Phone number must be 10 digits");
                return;
            }
            var toSave = new ContactModel
            {
                Id = contact.Id,
                Name = contact.Name,
                PhoneNumber = digits,
                Notes = contact.Notes
            };
            await MessageService.SaveContact(toSave);
            contacts = (await LoadContacts()).ToList();
            NotificationService.Notify(NotificationSeverity.Success, "Contact saved");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", ex.Message);
        }
    }
}

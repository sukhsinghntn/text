@page "/messages"
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@inject CookieHelper CookieHelper
@inject NavigationManager NavigationManager
@inject IMessageService MessageService

<PageTitle>Messages</PageTitle>

@if (!isLoaded)
{
    <p>Loading...</p>
}
else if (string.IsNullOrEmpty(userName))
{
    <div class="alert alert-warning">Please login to view messages.</div>
}
else
{
    <div class="chat-container">
        <aside class="recipients">
            @foreach (var r in recipients)
            {
                var display = contacts.FirstOrDefault(c => c.PhoneNumber == r)?.Name ?? r;
                var preview = lastMessages.ContainsKey(r) ? lastMessages[r] : string.Empty;
                <div class="recipient @(r == selectedRecipient ? "active" : string.Empty)" @onclick="(() => LoadConversation(r))">
                    <div class="avatar">@display.Substring(0,1)</div>
                    <div class="info">
                        <div class="name">@display</div>
                        <div class="preview">@preview</div>
                    </div>
                </div>
            }
        </aside>
        <section class="conversation">
            <div class="messages" id="messages">
                @foreach (var m in conversation)
                {
                    <div class="bubble @(m.Direction == "Sent" ? "outgoing" : "incoming")">@m.Body</div>
                }
            </div>
            <input id="messageInput" class="message-input" placeholder="Type a message" @bind="newMessage.Body" @onkeydown="HandleKeyDown" />
        </section>
    </div>
}

<style>
.chat-container {
    display: flex;
    height: 80vh;
    border: 1px solid #ccc;
}
.recipients {
    width: 30%;
    border-right: 1px solid #ccc;
    overflow-y: auto;
}
.recipient {
    padding: 10px;
    display: flex;
    cursor: pointer;
    border-bottom: 1px solid #eee;
}
.recipient.active {
    background: #f0f0f0;
}
.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #007bff;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    font-weight: bold;
}
.info .name {
    font-weight: bold;
}
.info .preview {
    font-size: 0.85rem;
    color: #666;
}
.conversation {
    flex: 1;
    display: flex;
    flex-direction: column;
}
.messages {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
}
.bubble {
    max-width: 70%;
    padding: 8px 12px;
    border-radius: 12px;
    margin-bottom: 8px;
}
.bubble.incoming {
    background: #e5e5ea;
    align-self: flex-start;
}
.bubble.outgoing {
    background: #0b93f6;
    color: white;
    align-self: flex-end;
}
.message-input {
    border: none;
    border-top: 1px solid #ccc;
    padding: 10px;
}
.message-input:focus {
    outline: none;
}
</style>

@code {
    private string? userName;
    private bool isLoaded;
    private List<string> recipients = new();
    private List<MessageModel> conversation = new();
    private string? selectedRecipient;
    private MessageModel newMessage = new();
    private List<ContactModel> contacts = new();
    private Dictionary<string, string> lastMessages = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userName = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(userName))
            {
                NavigationManager.NavigateTo("login?returnUrl=/messages", true);
            }
            else
            {
                recipients = (await MessageService.GetRecipients(userName)).ToList();
                contacts = (await MessageService.GetContacts()).ToList();
                foreach (var r in recipients)
                {
                    var conv = (await MessageService.GetConversation(userName, r)).ToList();
                    if (conv.Any())
                    {
                        lastMessages[r] = conv.Last().Body;
                    }
                }
            }
            isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadConversation(string recipient)
    {
        selectedRecipient = recipient;
        conversation = (await MessageService.GetConversation(userName!, recipient)).ToList();
        newMessage = new MessageModel { Recipient = recipient };
        if (!recipients.Contains(recipient))
        {
            recipients.Add(recipient);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage.Body))
        {
            await SendAsync();
        }
    }

    private async Task SendAsync()
    {
        newMessage.Sender = userName!;
        await MessageService.SendMessage(newMessage);
        conversation.Add(new MessageModel
        {
            Sender = userName!,
            Recipient = newMessage.Recipient,
            Body = newMessage.Body,
            Direction = "Sent",
            Timestamp = DateTime.UtcNow
        });
        lastMessages[newMessage.Recipient] = newMessage.Body;
        newMessage = new MessageModel { Recipient = selectedRecipient ?? string.Empty };
    }
}

@page "/messages"
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@using System.Linq
@using System.Timers
@inject CookieHelper CookieHelper
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Messages</PageTitle>

@if (!isLoaded)
{
    <p>Loading...</p>
}
else if (string.IsNullOrEmpty(userName))
{
    <div class="alert alert-warning">Please login to view messages.</div>
}
else
{
    <div class="chat-container">
        <aside class="recipients">
            <div class="new-chat" @onclick="StartNewChat"><span class="plus">+</span> New Message</div>
            @foreach (var r in recipients)
            {
                var display = contacts.FirstOrDefault(c => c.PhoneNumber == r)?.Name ?? r;
                var preview = lastMessages.ContainsKey(r) ? lastMessages[r] : string.Empty;
                <div class="recipient @(r == selectedRecipient ? "active" : string.Empty)" @onclick="(() => LoadConversation(r))">
                    <div class="avatar">@display.Substring(0,1)</div>
                    <div class="info">
                        <div class="name">@display</div>
                        <div class="preview">@preview</div>
                    </div>
                </div>
            }
        </aside>
        <section class="conversation">
            @if (isNewChat)
            {
                <RadzenDropDown Data="@contacts" TextProperty="Name" ValueProperty="PhoneNumber"
                                TValue="IEnumerable<string>" Value="@selectedRecipients" ValueChanged="@OnRecipientsChange" Multiple="true"
                                AllowClear="true" Placeholder="Select recipients" Style="margin:10px; width:calc(100% - 20px);" />
            }
            <div class="messages" id="messages">
                @foreach (var m in conversation)
                {
                    <div class="message-group @(m.Direction == "Sent" ? "outgoing" : "incoming")">
                        <div class="timestamp">@m.Timestamp.ToLocalTime().ToString("g")</div>
                        <div class="bubble @(m.Direction == "Sent" ? "outgoing" : "incoming")">@m.Body</div>
                    </div>
                }
            </div>
            <div class="input-bar">
                <input id="messageInput" class="message-input" placeholder="Type a message (your name and department will be sent automatically)" @bind="messageBody" @bind:event="oninput" @onkeydown="HandleKeyDown" />
                <RadzenButton Icon="send" Click="@SendAsync" Disabled="@(!CanSend)" Style="margin-left:5px" />
            </div>
        </section>
    </div>
}

<style>
.chat-container {
    display: flex;
    height: 80vh;
    border: 1px solid #ccc;
}
.recipients {
    width: 30%;
    border-right: 1px solid #ccc;
    overflow-y: auto;
    background: #333;
}
.new-chat {
    padding: 10px;
    border-bottom: 1px solid #eee;
    cursor: pointer;
    font-weight: bold;
}
.new-chat .plus {
    margin-right: 6px;
}
.recipient {
    padding: 10px;
    display: flex;
    cursor: pointer;
    border-bottom: 1px solid #eee;
    color: #fff;
}
.recipient.active {
    background: #2a2a2a;
}
.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #007bff;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    font-weight: bold;
}
.info .name {
    font-weight: bold;
}
.info .preview {
    font-size: 0.85rem;
    color: #ccc;
}
.conversation {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: #222;
}
.messages {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
}
.message-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 8px;
}
.message-group.incoming {
    align-items: flex-start;
}
.message-group.outgoing {
    align-items: flex-end;
}
.timestamp {
    font-size: 0.75rem;
    color: #999;
    margin-bottom: 2px;
}
.bubble {
    max-width: 70%;
    padding: 8px 12px;
    border-radius: 12px;
    white-space: pre-line;
}
.bubble.incoming {
    background: #444;
    color: #fff;
}
.bubble.outgoing {
    background: #0b93f6;
    color: #fff;
}
.input-bar {
    display: flex;
    border-top: 1px solid #ccc;
    padding: 10px;
}
.message-input {
    flex: 1;
    border: none;
    background: #222;
    color: #fff;
}
.message-input:focus {
    outline: none;
}
</style>

@code {
    private string? userName;
    private bool isLoaded;
    private List<string> recipients = new();
    private List<MessageModel> conversation = new();
    private string? selectedRecipient;
    private List<string> selectedRecipients = new();
    private string messageBody = string.Empty;
    private List<ContactModel> contacts = new();
    private Dictionary<string, string> lastMessages = new();
    private bool isNewChat;
    private Timer? refreshTimer;
    private bool CanSend => selectedRecipients.Any() && !string.IsNullOrWhiteSpace(messageBody);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userName = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(userName))
            {
                NavigationManager.NavigateTo("login?returnUrl=/messages", true);
            }
            else
            {
                contacts = (await MessageService.GetContacts()).ToList();
                await RefreshAsync();
                refreshTimer = new Timer(5000);
                refreshTimer.Elapsed += async (_, __) => await InvokeAsync(RefreshAsync);
                refreshTimer.AutoReset = true;
                refreshTimer.Start();
            }
            isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadConversation(string recipient)
    {
        selectedRecipient = recipient;
        selectedRecipients = new List<string> { recipient };
        await RefreshAsync();
        messageBody = string.Empty;
        isNewChat = false;
    }

    private async Task OnRecipientsChange(IEnumerable<string> values)
    {
        selectedRecipients = values.ToList();
        if (selectedRecipients.Count == 1)
        {
            await LoadConversation(selectedRecipients[0]);
            isNewChat = false;
        }
        else
        {
            selectedRecipient = null;
            conversation.Clear();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && CanSend)
        {
            await SendAsync();
        }
    }

    private async Task SendAsync()
    {
        var body = messageBody;
        foreach (var recipient in selectedRecipients)
        {
            var msg = new MessageModel
            {
                Sender = userName!,
                Recipient = recipient,
                Body = body
            };
            await MessageService.SendMessage(msg);
        }
        messageBody = string.Empty;
        await RefreshAsync();
    }

    private void StartNewChat()
    {
        isNewChat = true;
        selectedRecipient = null;
        selectedRecipients = new List<string>();
        conversation.Clear();
        messageBody = string.Empty;
        _ = ScrollToBottomAsync();
    }

    private async Task RefreshAsync()
    {
        if (string.IsNullOrEmpty(userName))
            return;

        var messages = (await MessageService.GetMessages(userName)).ToList();
        recipients = messages
            .Select(m => m.Direction == "Sent" ? m.Recipient : m.Sender)
            .Where(r => !string.IsNullOrEmpty(r))
            .Distinct()
            .ToList();

        lastMessages.Clear();
        foreach (var r in recipients)
        {
            var conv = messages
                .Where(m => (m.Recipient == r && m.Direction == "Sent") || (m.Sender == r && m.Direction != "Sent"))
                .OrderBy(m => m.Timestamp)
                .ToList();
            if (conv.Any())
            {
                lastMessages[r] = conv.Last().Body;
                if (selectedRecipient == r)
                    conversation = conv;
            }
        }

        StateHasChanged();
        await ScrollToBottomAsync();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private Task ScrollToBottomAsync() => JS.InvokeVoidAsync("scrollMessagesToBottom").AsTask();
}

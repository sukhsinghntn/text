@page "/contacts"
@using Radzen
@inject CookieHelper CookieHelper
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Contacts</PageTitle>

@if (!isLoaded)
{
    <p>Loading...</p>
}
else if (string.IsNullOrEmpty(userName))
{
    <div class="alert alert-warning">Please login to manage contacts.</div>
}
else
{
    <RadzenButton Text="Add Contact" Icon="add_circle" Click="@AddRow" Style="margin-bottom:10px" />
    <RadzenDataGrid @ref="grid" Data="@contacts" TItem="ContactModel" Editable="true" EditMode="DataGridEditMode.Popup"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" RowDelete="@OnDeleteRow">
        <Columns>
            <RadzenDataGridColumn TItem="ContactModel" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="ContactModel" Property="PhoneNumber" Title="Phone" />
            <RadzenDataGridCommandColumn TItem="ContactModel">
                <EditButton />
                <DeleteButton />
            </RadzenDataGridCommandColumn>
        </Columns>
    </RadzenDataGrid>
    <RadzenNotification />
}

@code {
    private string? userName;
    private bool isLoaded;
    private List<ContactModel> contacts = new();
    RadzenDataGrid<ContactModel>? grid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userName = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(userName))
            {
                NavigationManager.NavigateTo("login?returnUrl=/contacts", true);
            }
            else
            {
                contacts = (await MessageService.GetContacts(userName)).ToList();
            }
            isLoaded = true;
            StateHasChanged();
        }
    }

    async Task AddRow()
    {
        await grid!.InsertRow(new ContactModel { Owner = userName! });
    }

    async Task OnCreateRow(ContactModel contact)
    {
        contact.Owner = userName!;
        await MessageService.SaveContact(contact);
        contacts = (await MessageService.GetContacts(userName!)).ToList();
        NotificationService.Notify(NotificationSeverity.Success, "Contact added");
    }

    async Task OnUpdateRow(ContactModel contact)
    {
        contact.Owner = userName!;
        await MessageService.SaveContact(contact);
        contacts = (await MessageService.GetContacts(userName!)).ToList();
        NotificationService.Notify(NotificationSeverity.Success, "Contact updated");
    }

    async Task OnDeleteRow(ContactModel contact)
    {
        bool? confirm = await DialogService.Confirm("Are you sure you want to delete this contact?", "Delete Contact");
        if (confirm == true)
        {
            await MessageService.DeleteContact(contact.Id, userName!);
            contacts.Remove(contact);
            NotificationService.Notify(NotificationSeverity.Success, "Contact deleted");
            await grid!.Reload();
        }
    }
}
